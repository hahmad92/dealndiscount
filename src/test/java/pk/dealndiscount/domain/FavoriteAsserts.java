package pk.dealndiscount.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FavoriteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteAllPropertiesEquals(Favorite expected, Favorite actual) {
        assertFavoriteAutoGeneratedPropertiesEquals(expected, actual);
        assertFavoriteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteAllUpdatablePropertiesEquals(Favorite expected, Favorite actual) {
        assertFavoriteUpdatableFieldsEquals(expected, actual);
        assertFavoriteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteAutoGeneratedPropertiesEquals(Favorite expected, Favorite actual) {
        assertThat(expected)
            .as("Verify Favorite auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteUpdatableFieldsEquals(Favorite expected, Favorite actual) {
        assertThat(expected)
            .as("Verify Favorite relevant properties")
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getStoreId()).as("check storeId").isEqualTo(actual.getStoreId()))
            .satisfies(e -> assertThat(e.getCityId()).as("check cityId").isEqualTo(actual.getCityId()))
            .satisfies(e -> assertThat(e.getCardId()).as("check cardId").isEqualTo(actual.getCardId()))
            .satisfies(e -> assertThat(e.getFavoriteType()).as("check favoriteType").isEqualTo(actual.getFavoriteType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFavoriteUpdatableRelationshipsEquals(Favorite expected, Favorite actual) {}
}
